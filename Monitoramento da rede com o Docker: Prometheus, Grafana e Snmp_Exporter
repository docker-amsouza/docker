        Monitoramento da rede com o Docker: Prometheus, Grafana e Snmp_Exporter

1. Para baixar o prometheus => docker pull prom/prometheus
2. Para baixar o snmp-exporter => docker pull prom/snmp-exporter
3. Para baixar o grafana => docker pull grafana/grafana-oss
4. Para entrar no container prometheus => docker exec -it prometheus sh
5. Dentro do container prometheus => vi /etc/prometheus/prometheus.yml
    • Apague tudo abaixo de:
    # Here it's Prometheus itself, e cole essas informações:

scrape_configs:
  - job_name: 'snmp'
    scrape_interval: 60s                            # Intervalo de coleta
    scrape_timeout: 30s                             # Tempo máximo para coleta
    static_configs:
      - targets:
          - 172.188.10.1                            # Altere o IP de acordo com a sua rede.
          - 172.188.10.3                            # Altere o IP de acordo com a sua rede.
          - 172.188.10.5                            # Altere o IP de acordo com a sua rede.
          - 172.188.10.7                            # Altere o IP de acordo com a sua rede.

    metrics_path: /metrics                          # Alterado para o caminho correto de métricas
    params:
      auth: [public_v2]
      module: [if_mib]
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: 172.188.0.2:9116               # IP do contêiner do snmp_exporter.


6. Para fixar um IP no container e necessário criar uma rede personalizada:

    • docker network create --subnet=172.188.0.0/16 monitoring
    • docker run --name prometheus --privileged --restart=always --net monitoring --ip 172.188.0.4 -v /path/to/prometheus.yml:/etc/prometheus/prometheus.yml -d -p 9090:9090 prom/prometheus
    • docker run --name snmpexporter --privileged --restart=always --net monitoring --ip 172.188.0.2 -v /path/to/snmp.yml:/etc/snmp_exporter/snmp.yml -d -p 9116:9116 prom/snmp-exporter
    • docker run --name grafana --restart=always --net monitoring --ip 172.188.0.5 -v /path/to/grafana/data:/var/lib/grafana -d -p 3000:3000 grafana/grafana-oss


    Observação: Aqui estou criando a rede 172.188.0.0/16 e fixando o IP junto a cada container docker.
                Altere o IP de acordo com a sua rede.

A. Explicação do comando:
    docker network create --subnet=172.188.0.0/16 monitoring

    • docker network create: Este comando é usado para criar uma nova rede Docker. Quando você cria uma rede, os containers podem se comunicar entre si dentro dessa rede, usando seus nomes ou endereços IPs.
    • --subnet=172.188.0.0/16: A opção --subnet define o intervalo de IPs que será atribuído à rede Docker. Neste caso, a subnet é 172.188.0.0/16.
    • monitoring: Este é o nome da rede que está sendo criada. O nome monitoring será utilizado para referenciar a rede ao conectar containers a ela ou ao realizar operações na rede. Pode ser qualquer nome que você escolher, mas é importante garantir que seja único no ambiente Docker.

B. Explicação do comando:
    docker run --name prometheus --privileged --restart=always --net monitoring --ip 172.188.0.4 -v /path/to/prometheus.yml:/etc/prometheus/prometheus.yml -d -p 9090:9090 prom/prometheus

    • docker run: Este comando é usado para criar e iniciar um container Docker baseado em uma imagem.
    • --name prometheus: Especifica o nome do container como prometheus, facilitando sua identificação e gerenciamento posterior.
    • --privileged: Concede permissões adicionais ao container, permitindo que ele acesse dispositivos do host e execute operações que normalmente seriam restritas. Esse parâmetro é comum quando o container precisa de acesso privilegiado a recursos do sistema (por exemplo, para monitoramento de rede ou uso de dispositivos do sistema).
    • --restart=always: Configura o container para reiniciar automaticamente: Sempre que ele for parado ou o sistema host for reiniciado. Ideal para garantir que o Prometheus esteja sempre ativo e monitorando o ambiente.
    • --net monitoring: Conecta o container à rede Docker chamada monitoring. Isso permite que o Prometheus interaja diretamente com outros containers na mesma rede, como Grafana ou SNMP Exporter. A rede monitoring precisa existir previamente.
    • --ip 172.188.0.4: Define um IP fixo para o container dentro da rede monitoring. O IP atribuído será 172.188.0.4. Isso garante que o Prometheus sempre será acessível pelo mesmo IP dentro da rede Docker.
    • -v /path/to/prometheus.yml:/etc/prometheus/prometheus.yml: Realiza um bind mount de um arquivo de configuração local para dentro do container: Fonte: /path/to/prometheus.yml (no host, substitua com o caminho correto para o arquivo de configuração do Prometheus). Destino: /etc/prometheus/prometheus.yml (no container, que é onde o Prometheus espera encontrar o arquivo de configuração).
    • -d: Executa o container no modo "detached" (segundo plano). Isso significa que o container será iniciado em segundo plano, liberando o terminal para outros comandos.
    • -p 9090:9090: Realiza o mapeamento de portas: 9090 (host): A porta do host onde o Prometheus será acessível. 9090 (container): A porta interna do container onde o Prometheus está escutando. Isso significa que você pode acessar o Prometheus no navegador via http://<IP-do-host>:9090.
    • prom/prometheus: Especifica a imagem Docker que será usada para criar o container. Neste caso, está sendo utilizada a imagem oficial do Prometheus, prom/prometheus.

C. Explicação do comando:
    docker run --name snmpexporter --privileged --restart=always --net monitoring --ip 172.188.0.2 -v /path/to/snmp.yml:/etc/snmp_exporter/snmp.yml -d -p 9116:9116 prom/snmp-exporter

    • docker run: Este comando é usado para criar e iniciar um container baseado em uma imagem Docker.
    • --name snmpexporter: Define o nome do container como snmpexporter, facilitando a identificação e gerenciamento.
    • --privileged: Concede permissões adicionais ao container, permitindo que ele acesse dispositivos do host e execute operações que normalmente seriam restritas. Uso comum em casos onde o container precisa de acesso avançado a recursos do sistema.
    • --restart=always: Configura o container para reiniciar automaticamente: Sempre que ele for parado ou o host reiniciado. Ideal para serviços que precisam estar sempre ativos.
    • --net monitoring: Especifica que o container será conectado a uma rede Docker chamada monitoring. 
    • --ip 172.188.0.2: Define um endereço IP fixo para o container dentro da rede monitoring. Garante que o container seja acessível sempre pelo mesmo IP dentro dessa rede.
    • -v /path/to/snmp.yml:/etc/snmp_exporter/snmp.yml: Realiza o bind mount de um arquivo de configuração SNMP local (/path/to/snmp.yml) para o container.
    • -d: Executa o container em segundo plano (modo "detached"). O terminal não ficará preso ao processo do container.
    • -p 9116:9116: Faz o mapeamento de portas: Porta 9116 no host será encaminhada para a porta 9116 no container. Necessário para acessar o SNMP Exporter externamente.
    • prom/snmp-exporter: Indica a imagem Docker que será usada para criar o container. Nesse caso, é o SNMP Exporter oficial para Prometheus.

D. Explicação do comando:
    docker run --name grafana --restart=always --net monitoring --ip 172.188.0.5 -v /path/to/grafana/data:/var/lib/grafana -d -p 3000:3000 grafana/grafana-oss

    • docker run: Inicia um container baseado em uma imagem Docker.
    • --name grafana: Define o nome do container como grafana, facilitando a sua identificação e o gerenciamento com outros comandos Docker.
    • --restart=always: Configura o container para reiniciar automaticamente nas seguintes condições: Caso o container pare inesperadamente. Quando o sistema host for reiniciado. Ideal para serviços que precisam ser executados continuamente.
    • --net monitoring: Conecta o container a uma rede Docker chamada monitoring. Isso permite que o Grafana interaja com outros containers na mesma rede, como Prometheus, SNMP Exporter, ou outros serviços de monitoramento.
    • --ip 172.188.0.5: Atribui um endereço IP fixo ao container 172.188.0.5 dentro da rede monitoring. Isso garante que o Grafana sempre será acessível pelo mesmo IP na rede interna.
    • -v /path/to/grafana/data:/var/lib/grafana: Cria um bind mount para persistência de dados: Fonte no host: /path/to/grafana/data (substitua pelo caminho real no seu sistema). Destino no container: /var/lib/grafana (diretório onde o Grafana armazena suas configurações, dashboards e dados persistentes).
    • -d: Inicia o container no modo "detached" (segundo plano), liberando o terminal para outros comandos.
    • -p 3000:3000: Mapeia a porta 3000 do host para a porta 3000 do container. Isso torna o Grafana acessível externamente no endereço do host.
    • grafana/grafana-oss: Especifica a imagem Docker a ser usada para criar o container. Nesse caso, a versão Open Source do Grafana.

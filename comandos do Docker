Comandos do docker:

    • docker ps => lista todos os containers em execução
    • docker images => lista todas as imagens Docker disponíveis localmente 
    • docker logs <container_id> => comando para inspecionar os logs
    • docker restart <container_id> => para reiniciar o container
    • docker stop <container_id> => para parar o container 
    • docker start <container_id> => para iniciar o container
    • docker rmi <name_image> => para remover uma imagem local
    • docker rm <container_id> => para remove um ou mais containers
    • docker --version => exibi a versão do docker 
    • docker rename <nome_do_container_antigo nome_do_container_nove> => renomeia um container existente 
    • docker login => registra ou faz o login em um servidor de registro
    • docker --help => ver todos os comandos que o Docker possui, tendo o docker instalado
    • docker network ls => exibe todas as placas de rede Docker
    • docker creater network <name_interface> => para criar uma interface 
    • docker update --restart unless-stopped <container_id> => isso confirma que o contêiner será reiniciado automaticamente, a menos que você o pare manualmente	
    • docker exec -it <container_id> /bin/bash => para entrar no container
    • docker update --restart always <container_name_or_id> => Quando definida como always, isso significa que o Docker irá tentar reiniciar o container sempre que ele parar, seja por falha, reinicialização do Docker ou do sistema.
    • docker inspect --format '{{.Name}}: {{.HostConfig.RestartPolicy.Name}}' <nome do container> => para verificar se o container irá iniciar automaticamento após a reinicialização do sistema ou alguma falha, o retorno deverá ser: always
    • docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container_id> => Esse comando retorna o endereço IP atribuído ao container dentro da rede bridge
